class Key extends Phaser.Group
	# internal class
	class KeyFactory
		@ENTER_CODE = -8
		@BACKSPACE_CODE = -13
		@ENTER = (game)->
			new Key(game, @ENTER_CODE, '√')
		@BACKSPACE = (game)->
			new Key(game, @BACKSPACE_CODE, '←')

	# public class attributes
	<% CHARACTER_RES = 'characters_all'%>
	@new            = KeyFactory
	@CHARACTER_RES  = '<%= CHARACTER_RES %>'
	@States         = {
		NORMAL: 0x0
		OVER:   0x1
		DOWN:   0x2
	}
	@DEFAULT_SIZE = 50

	# public class methods
	@preload: (game)->
		game.load.spritesheet(CHARACTER_RES,'<%= image_path("#{CHARACTER_RES}.png") %>', 160, 160, 59)

	# internal class attributes
	Colors          = {         
		NORMAL: Phaser.Color.createColor(0xee, 0xee, 0xee)
		OVER:   Phaser.Color.createColor(0xcc, 0xcc, 0xcc)
		DOWN:   Phaser.Color.createColor(0xdd, 0xdd, 0xdd)
	}
	CHARACTER_RES   = @CHARACTER_RES
	DEFAULT_SIZE    = @DEFAULT_SIZE
	States          = @States
	BACKGROUD_COLOR	= Colors.NORMAL

	# public instance methods
	constructor: (game, keycode, letter, size)->
		super(game, null, "SoftKeyboard-Key")
		@keysize = size || DEFAULT_SIZE
		@letter = keycode
		@keycode = keycode
		@state = States.NORMAL

		# init methods
		init_background = =>
			bmd = game.add.bitmapData(@keysize, @keysize);
			bmd.ctx.beginPath()
			bmd.ctx.rect(0, 0, @keysize, @keysize)
			@background = new Phaser.Sprite(game, 0, 0, bmd)
			@background.fillColor = (color)->
				@key.fill(color.r, color.g, color.b)
			@background.fillColor(BACKGROUD_COLOR)
			@add(@background)

		init_with_character = =>
			@character =new Phaser.Sprite(game, 0, 0, CHARACTER_RES, keycode)
			@character.height = @character.width = @keysize
			@add(@character)

		init_with_letter = =>
			style = { font: "32px Arial", fill: "#233333" }
			text = new Phaser.Text(game, 14, 5, letter, style)
			@letter = letter
			@add(text)

		init_events = =>
			@keyOver = @keyOut = @keyDown = @keyUp = null

		## ====

		init_background()
		if letter
			init_with_letter()
		else
			init_with_character()
		init_events()
		@enable_input()

	enable_input: =>
		@background.inputEnabled = true
		e = @background.events
		e.onInputOver.add(@overHandler, this)
		e.onInputOut.add(@outHandler, this)
		e.onInputDown.add(@downHandler, this)
		e.onInputUp.add(@upHandler, this)

	disable_input: =>
		@background.inputEnabled = false

	overHandler: =>
		@background.fillColor(Colors.OVER)
		@state = States.OVER
		if @keyOver
			@keyOver(this)

	outHandler: =>
		@background.fillColor(Colors.NORMAL)
		@state = States.NORMAL
		if @keyOut
			@keyOut(this)

	downHandler: =>
		if @state == States.OVER
			@background.fillColor(Colors.DOWN)
			console.log(@keycode)
		if @keyDown
			@keyDown(this)

	upHandler: ->
		if @state == States.OVER
			@background.fillColor(Colors.OVER)

	toString: ()->
		{keycode: @keycode, letter: @letter}.toString()

class InputBar extends Phaser.Group
	BACKGROUD_COLOR = Phaser.Color.createColor(0xdd, 0xdd, 0xee)
	constructor: (game, keyboard)->
		super(game, null, "SoftKeyboard-InputBar")
		@game = game
		@ch_queue = []
		@keysize = keyboard.keysize
		@row_size = keyboard.row_size
		@_character_textures = {}

		init_background = =>
			bmd = game.add.bitmapData(@row_size*@keysize, @keysize)
			bmd.fill(BACKGROUD_COLOR.r, BACKGROUD_COLOR.g, BACKGROUD_COLOR.b)
			@add(new Phaser.Sprite(game, 0, 0, bmd))

		init_charaters = =>
			c = game.cache
			img = game.cache.getImage(Key.CHARACTER_RES);
			@_characters_bitmapdata = bmd = game.make.bitmapData(img.width, img.height)
			bmd.draw(img, 0, 0, img.width, img.height)
			bmd.update()
			bmd.replaceRGB(0,0,0,255, 70,30,30,255)


		init_background()
		init_charaters()

	addCh: (key)->
		@ch_queue.push(key)
		@update_text()

	backspace: ->
		return if @ch_queue.length==0
		@ch_queue.pop()
		@update_text()

	update_text: ->
		tmp = @ch_queue
		@removeAll()
		@ch_queue = tmp
		visible_chs = if @ch_queue.length>@row_size then @ch_queue[-@row_size..-1] else @ch_queue
		pre_character = null
		for ch, i in visible_chs
			keycode = ch.keycode
			if !(texture = @_character_textures[keycode])
				tmp = new Phaser.Sprite(@game, 0, 0, @_characters_bitmapdata)
				fd = @game.cache.getFrameData(Key.CHARACTER_RES)
				tmp.animations.loadFrameData(fd, keycode)
				tmp.destroy()

				bmd = @game.make.bitmapData(@keysize, @keysize)
				bmd.draw(tmp, 0, 0, @keysize, @keysize)
				bmd.update()
				@_character_textures[keycode] = texture = bmd

			character = new Phaser.Sprite(@game, 0, 0, texture)
			character.x = i*@keysize
			@add(character)

	removeAll: ->
		if @children.length > 1
			@removeBetween(1, @children.length-1, true)
		@ch_queue = []

class SoftKeyboard extends Phaser.Group
	@preload: (game)->
		Key.preload(game)

	KEY_NUM = 59
	KEY_PREVIEW_SIZE = 160

	constructor: (game, size)->
		super(game, null, "SoftKeyboard")
		@keys = {}
		@row_size = 10
		@keysize = size || Key.DEFAULT_SIZE
		@onPosted = new Phaser.Signal()
		@onInputed = new Phaser.Signal()
		@key_pad = new Phaser.Group(game)
		@key_preview = new Phaser.Group(game)

		key_pos = (key, i)=>
			key.x = (i%@row_size)*(key.keysize+0)
			key.y = Math.floor(i/@row_size)*(key.keysize+0)

		init_normal_key = =>
			for i in [0...KEY_NUM]
				keycode = i
				key = new Key(game, keycode, null, size)
				bigKey = new Key(game, keycode, undefined, KEY_PREVIEW_SIZE)
				key_pos(key, keycode)
				@keys[keycode] = {org: key, big: bigKey}
				key.keyOver = (key) =>
					@key_preview.removeAll
					current = @keys[key.keycode].big
					@key_preview.add(current)
					for k,v of @keys
						if parseInt(k) != key.keycode && v.state != Key.States.NORMAL
							v.org.outHandler()
				key.keyOut = (key) =>
					for k,v of @keys
						if v.org.state == Key.States.OVER
							return
					@key_preview.removeAll()
				key.keyDown = (key) =>
					@handleInput(key)

				@key_pad.add(key)

		init_function_key = =>
			backspace = Key.new.BACKSPACE(game)
			key_pos(backspace, KEY_NUM)
			backspace.keyDown = (key) =>
				@inputbar.backspace()

			enter = Key.new.ENTER(game)
			key_pos(enter, KEY_NUM+1)
			enter.keyDown = (key) =>
				@handlePost()

			@key_pad.add(enter)
			@key_pad.add(backspace)


		init_input_bar = =>
			@inputbar = new InputBar(game, this, @keysize)
			@add(@inputbar)
		
		init_layout = =>
			@key_pad.y = (@inputbar && @inputbar.height) || 0
			@add(@key_pad)

			@key_preview.x = -KEY_PREVIEW_SIZE-5
			@add(@key_preview)
			@y = game.camera.view.height - (@height + 24);
			@alpha = 0.95
			
		init_normal_key()
		# init_function_key()
		init_layout()

	handleInput: (key)->
		if @inputbar
			@inputbar.addCh(key)
		else
			@onInputed.dispatch(key)

	handlePost: ->
		code_ar = []
		for key in @inputbar.ch_queue
			code_ar.push(key.keycode)
		console.log(code_ar)
		alert(code_ar)
		@inputbar.removeAll()
		@onPosted.dispatch(this)

	disable: ->
		enable = false
		@key_pad.forEach((key)->
			key.disable_input()
		)

	enable: ->
		enable = true
		@key_pad.forEach((key)->
			key.enable_input()
		)