class Key extends Phaser.Group
	Colors = { 		
		NORMAL: '#FFFFFF'
		OVER:	'#DDDDDD'
		DOWN:	'#EEEEEE'
	}
	States = {
		NORMAL: 0x0
		OVER:	0x1
		DOWN:	0x2
	}
	@KEYSIZE = 50
	constructor: (game, letter, keycode)->
		super(game, null, "SoftKeyboard-Key")
		style = { font: "32px Arial", fill: "#aabbcc" }
		text = new Phaser.Text(game, 14, 5, letter, style)
		@keysize = Key.KEYSIZE
		@letter = letter
		@keycode = keycode
		@state = States.NORMAL

		@bmd = game.add.bitmapData(@keysize, @keysize);
		@bmd.ctx.beginPath()
		@bmd.ctx.rect(0, 0, @keysize, @keysize)
		@bmd.ctx.fillStyle = '#FFFFFF';
		@bmd.ctx.fill()

		sprite = new Phaser.Sprite(game, 0, 0, @bmd)
		@add(sprite)
		@add(text)

		sprite.inputEnabled = true;
		sprite.events.onInputOver.add(@inputOver, this)
		sprite.events.onInputOut.add(@inputOut, this)
		sprite.events.onInputDown.add(@downHandler, this)
		sprite.events.onInputUp.add(@upHandler, this)

	inputOver: ->
		@bgFill(Colors.OVER)
		@state = States.OVER
		if @keyover_callback
			@keyover_callback(this)

	inputOut: ->
		@bgFill(Colors.NORMAL)
		@state = States.NORMAL

	downHandler: ->
		if @state == States.OVER
			@bgFill(Colors.DOWN)
			console.log(@keycode)
		if @keydown_callback
			@keydown_callback(this)

	upHandler: ->
		if @state == States.OVER
			@bgFill(Colors.OVER)

	bgFill: (color)->
		@bmd.ctx.fillStyle = color
		@bmd.ctx.fill()
		# @bg.beginFill(color);
		# # @bg.lineStyle(2, 0x999999, 1)
		# @bg.drawRect(0, 0, @keysize, @keysize)	

	keyOver: (callback)->
		@keyover_callback = callback

	keyDown: (callback) ->
		@keydown_callback = callback

	toString: ()->
		{keycode: @keycode, letter: @letter}.toString()

class InputBar extends Phaser.Group
	constructor: (game, keyboard)->
		super(game, null, "SoftKeyboard-InputBar")
		@game = game
		@cursor_pos = 0
		@ch_queue = []

		@keysize = keyboard.keysize
		@row_size = keyboard.row_size

		@bmd = game.add.bitmapData(@row_size*@keysize, @keysize);
		@bmd.ctx.beginPath()
		@bmd.ctx.rect(0, 0, @row_size*@keysize, @keysize)
		@bmd.ctx.fillStyle = '#DDDDEE';
		@bmd.ctx.fill()
		sprite = new Phaser.Sprite(game, 0, 0, @bmd)

		@add(sprite)

	addCh: (key)->
		@ch_queue.push(key)
		@cursor_pos += 1
		@update_text()

	backspace: ->
		return if @ch_queue.length==0
		@ch_queue.pop()
		@cursor_pos -= 1
		@update_text()


	update_text: ->
		tmp = @ch_queue
		@removeAll()
		@ch_queue = tmp
		visible_chs = if @ch_queue.length>@row_size then @ch_queue[-@row_size..-1] else @ch_queue
		for ch, i in visible_chs
			ch_im = @createCh(ch.letter)
			ch_im.x = i*@keysize
			@add(ch_im)

	removeAll: ->
		if @children.length > 1
			@removeBetween(1, @children.length-1)
		@ch_queue = []

	createCh: (ch)->
		style = { font: "#{@keysize}px Arial", fill: "#996699" }
		text = new Phaser.Text(@game, 14, 5, ch, style)
		text.y = -4
		text

class SoftKeyboard extends Phaser.Group

	constructor: (game)->
		super(game, null, "SoftKeyboard")
		@keys = {}
		@row_size = 12
		@keysize = Key.KEYSIZE
		@onPosted = new Phaser.Signal()
		for i in [0..70]
			letter = if i == 69 then '←' else String.fromCharCode(48+i)
			if i == 69 
				keycode = 8 
				letter = '←'
			else if i==70
				keycode = 13
				letter = '√'
			else
				keycode = 48+i
				letter = String.fromCharCode(48+i)
			key = new Key(game, letter, keycode)
			@add(key)
			key.x = (i%@row_size)*(key.keysize+0)
			key.y = Math.floor(i/@row_size)*(key.keysize+0)
			@keys[keycode] = key
			keys = @keys
			# key.keyOver()
			key.keyOver (key)->
				for k,v of keys
					if parseInt(k) != key.keycode
						v.inputOut()
			key.keyDown (key) =>
				@handleKey(key)

		@inputbar = new InputBar(game, this)

		@y = game.camera.view.height - (@height + 24);
		@add(@inputbar)
		@alpha = 0.95

	hide: ->
		@visible = false

	handleKey: (key)->
		# alert keycode
		switch key.keycode
			when 8
				@inputbar.backspace()
			when 13
				@handlePost()
			else
				@inputbar.addCh(key)
	handlePost: ->
		code_ar = []
		for key in @inputbar.ch_queue
			code_ar.push(key.keycode)
		console.log(code_ar)
		alert(code_ar)
		@inputbar.removeAll()
		@onPosted.dispatch(this)
