#-import glyph.game.lib.QuestionBoard
#-import glyph.game.lib.Util


player = null
game = null
timer = null

class Ep1
	
root.init_ep1 = ->
	init()

init = ->
	game = new Phaser.Game(1280, 720, Phaser.CANVAS, 'glyph-1', { preload: preload, create: create, update: update, render: render })

preload = ->
	game.load.image('background', '<%= asset_path("gensokyo.png") %>')
	game.load.image('player','<%= asset_path("phaser-dude.png") %>')
	game.load.image('yyy','<%= asset_path("yyy.png") %>')

create = ->
	tileSprite = game.add.tileSprite(0, 0, 1440*2, 1080*2, 'background')
	game.world.setBounds(0, 0, 1440*2, 1080*2)
	game.physics.startSystem(Phaser.Physics.ARCADE)
	game.physics.arcade.setBoundsToWorld()

	player = game.add.sprite(game.world.centerX, game.world.centerY, 'player')
	game.physics.arcade.enable(player)
	game.camera.follow(player)
	player.anchor.set(0.5);

	@mouse = game.input.keyboard.createCursorKeys()

	tileSprite.inputEnabled = true;
	tileSprite.events.onInputDown.add(handleClick, this)

popQusetionBoard = ->
	qb = new QuestionBoard(game)
	qb.alpha = 0
	game.world.add(qb)
	qb.popup()
	Util.setXCenter(qb, game.camera.view)
	qb.fixedToCamera = true
	qb.onComplete.add =>
		game.world.remove(qb)
		qb.destroy()
		timer = game.time.create(true);
		timer.add(100, resumeBaseWorld, this)
		timer.start()

desti = null
freeze = false
handleClick = (sprte, pointer)->
	# if timer then p timer;asdfasfasf();
	return if freeze
	# pointer = game.input.mousePointer
	# if !(pointer.isDown && (not pointer.justPressed(100)))
	# p event
	# return
	desti = new Phaser.Point(pointer.worldX, pointer.worldY)
	game.physics.arcade.moveToXY(player, desti.x, desti.y, 400)

freezeBaseWorld = ->
	freeze = true
	player.body.velocity.setTo(0, 0) 
	desti = null

resumeBaseWorld = ->
	freeze = false
		
update = ->
	if desti
		seed = Math.random()
		if seed>0.22 && seed<0.233
			freezeBaseWorld()
			popQusetionBoard()
		else if Phaser.Rectangle.containsPoint(player.body, desti)
			player.body.velocity.setTo(0, 0) 
			desti = null

render = ->
	game.debug.cameraInfo(game.camera, 32, 32)
	game.debug.spriteCoords(player, 32, 500)